===================================================
Discord LLM Verification Bot - Functional Specifications
===================================================

1. Bot Overview and Purpose
-----------------------------
The primary purpose of this Discord bot is to automate the user verification process. It uses a Large Language Model (LLM) to interact with users, classify their provided information (experience level, operating systems, programming languages), and assign appropriate Discord roles. The goal is to ensure all users are eventually categorized with either a "verified" or "unverified" status, alongside any relevant skill-based roles.

2. Core Verification Process (for Users)
------------------------------------------
This process is designed to gather information from users and assign roles accordingly.

    2.1. Initiation:
        - Automatically for new members joining the server.
        - Manually by an admin using the `/admin verify-user @member` command.
        - Manually by an admin for a batch of users using the `/admin initiate-verification-batch` command.
        - Manually by a user for themselves using the `/assign-roles` command.

    2.2. DM Interaction with LLM:
        - Upon initiation, the user receives a Direct Message (DM) from the bot.
        - The ensuing conversation is driven by the LLM. The LLM's responses and questions are based on pre-defined prompts and the user's input.
        - The bot facilitates the message exchange between the user and the LLM.

    2.3. Information Categories:
        - The verification process aims to gather information primarily for three categories:
            1. Programming Languages known by the user.
            2. Experience Level (e.g., beginner, intermediate, expert).
            3. Operating Systems used by the user.
        - These categories are used by the LLM to classify the user against existing server roles.

    2.4. LLM Classification Logic:
        - The LLM is provided with a list of existing, relevant server roles that have been pre-categorized (see Section 3.3).
        - Based on the user's free-text responses, the LLM attempts to map the information to one or more roles within each known category (Programming Language, Experience, OS).
        - If a user mentions a skill that is valid for a category but no corresponding Discord role exists (e.g., a programming language not yet a role), this is handled as per Section 3.4.
        - Skills mentioned by the user that are irrelevant to the defined categories (e.g., "soccer skills") should be ignored by the LLM in terms of classification, and the LLM should guide the user back to relevant topics.

    2.5. Confirmation and Retries:
        - After the LLM processes user input, it will propose a classification. The bot will present this to the user, often with a message generated by the LLM (e.g., "Based on your information, I'll assign you these roles: [Role A, Role B]. Is this correct?").
        - Users can confirm or deny the proposed classification (e.g., via buttons in the DM).
            - If confirmed: Roles are applied as per the outcome.
            - If denied: The user is prompted to provide new or clarifying information. This restart of the immediate classification attempt does not immediately consume an overall retry attempt for the entire verification session.
        - If the LLM determines that the information provided is insufficient to make a complete classification across all desired categories, it will generate a message prompting the user for the missing pieces.
        - The bot will allow a configurable number of overall interaction attempts (e.g., 3 retries, defined in `.env`) for the user to provide sufficient information if the LLM repeatedly finds it incomplete.

    2.6. Verification Outcomes:
        - **Verified Status:** A user is assigned the main "verified" role if they engage with the verification process and provide information that allows the LLM to assign them at least one relevant skill/experience/OS role. This means a user can become "verified" even if they only provide partial information (e.g., programming languages but not OS or experience). The LLM-generated message will reflect what was assigned and may encourage them to update later.
        - **Unverified Status:** A user is assigned or retains the "unverified" role if:
            - They are a new user who does not respond to or complete the initial verification DM.
            - They are an existing user who has not yet gone through the verification process.
            - They explicitly fail to provide any classifiable information after all retry attempts during a verification session.
            - They are reset from "verificationinprogress" status by an admin command without having completed verification.
        - Assignment of specific skill, experience, or OS roles occurs in conjunction with the "verified" status, based on the LLM's final confirmed classification.

    2.7. "verificationinprogress" Role:
        - When a user is actively engaged in the DM verification flow (i.e., the process has been initiated but not yet concluded with a "verified" or "unverified" status), they are assigned a temporary "verificationinprogress" role.
        - This role is used to track users currently being processed and to prevent them from being targeted by new batch initiations until their current attempt concludes.
        - This role is removed once the verification attempt concludes, regardless of the outcome (verified or unverified).

3. Role Management
-------------------
    3.1. Key Roles:
        - `Verified Role ID`: Configurable ID for the main "verified" role.
        - `Unverified Role ID`: Configurable ID for the main "unverified" role.
        - `Verification In Progress Role ID`: Configurable ID for the temporary "verificationinprogress" role.
        - `Admin Role IDs`: Configurable list of role IDs that have permission to use the bot's admin commands.
        - (The actual names of these roles in Discord are up to the server admins; the bot uses their IDs).

    3.2. Skill, Experience, OS Roles:
        - These are standard Discord roles that exist on the server (e.g., "Lang: Python", "OS: Linux", "Exp: Senior").
        - The bot does not create these roles but maps user information to them based on the LLM's classification and the initial role categorization (see 3.3).

    3.3. Initial Server Role Categorization by LLM (Startup & Rebuild):
        - On bot startup (if `REBUILD_ROLE_CATEGORIES_ON_STARTUP` is true in `.env` or if a cached categorized list doesn't exist), or when triggered by the `/admin rebuild-role-categories` command:
            1. The bot fetches all roles present on the Discord server.
            2. It sends this list of roles (names and IDs) to the LLM using a specific, configurable prompt (from a prompt file).
            3. This prompt instructs the LLM to group the provided server roles into the defined categories (e.g., "Programming Language," "Experience Level," "OS").
            4. The LLM should ignore server roles that do not cleanly fit into these predefined categories.
            5. The LLM's output (a categorized list of existing role IDs) is stored by the bot (e.g., in a `categorized_roles.json` file) and used as the reference list for user verification.
        - If `REBUILD_ROLE_CATEGORIES_ON_STARTUP` is false and a cached list exists, the bot loads and uses the cached list.

    3.4. Handling Unmappable Skills Mentioned by Users:
        - During user verification, if a user mentions a skill that the LLM recognizes as belonging to a relevant category (e.g., "Pascal" for "Programming Language") but for which no corresponding role exists in the bot's pre-categorized list of server roles:
            1. The LLM should indicate this situation in its structured output to the bot.
            2. The LLM should generate a message for the user acknowledging the skill but stating that a specific role for it is not currently available (e.g., "I understand you use Pascal. We don't have a specific role for that right now, but this information is noted.").
            3. The bot will send a notification to a designated admin channel (ID configurable in `.env`). This notification will include the user's name/ID and the unmappable skill they mentioned (e.g., "User 'JohnDoe#1234' mentioned skill 'Pascal' in category 'Programming Language', but no corresponding role exists.").
            4. This event does not prevent the user from completing verification with other mappable skills or from receiving the "verified" status.

4. Commands
------------
    4.1. Admin Commands:
        - Admin commands are grouped under an `/admin` prefix (e.g., `/admin verify-user`).
        - Access to these commands is restricted to users who possess at least one of the roles defined in the `ADMIN_ROLE_IDS` list in the `.env` file.

        4.1.1. `/admin verify-user @member`:
            - Manually triggers the full DM verification process (as described in Section 2) for the specified server member.

        4.1.2. `/admin initiate-verification-batch count:<number>`:
            - Selects up to the specified `<number>` of users who currently have the "unverified" role (and do not have "verified" or "verificationinprogress").
            - For each selected user, it initiates the DM verification process and assigns them the "verificationinprogress" role.
            - Care should be taken by the bot's implementation to avoid sending DMs too rapidly (e.g., adding small delays between initiations if necessary).

        4.1.3. `/admin reset-stale-verifications`:
            - This command targets two groups of users:
                a) Users who currently have the "verificationinprogress" role (indicating they started but did not complete a verification attempt).
                b) Existing server members who do *not* have a "verified" role AND do *not* have an "unverified" role (i.e., users who have not yet been processed by the system at all).
            - For all targeted users:
                - If they have the "verificationinprogress" role, it is removed.
                - They are assigned the "unverified" role.
            - This command is used for cleanup and to initialize existing users into the verification system.

        4.1.4. `/admin rebuild-role-categories`:
            - Manually triggers the initial server role categorization process by the LLM, as described in Section 3.3.
            - The bot will re-fetch all server roles, send them to the LLM for categorization, and update its stored list of categorized roles (e.g., `categorized_roles.json`).
            - The admin executing the command should receive feedback on success or failure.

    4.2. User Command:

        4.2.1. `/assign-roles`:
            - This is a top-level command (not under a group).
            - It allows any user to self-initiate or re-attempt the DM verification process (as described in Section 2) for themselves.
            - This is useful if they missed the initial DM, want to update their roles, or if a previous attempt resulted in an "unverified" status or partial role assignment.

5. Automated Actions
---------------------
    5.1. New Member Onboarding:
        - When a new user joins the Discord server, the bot automatically initiates the DM verification process (as described in Section 2) for that user.

    5.2. LLM-Generated Welcome Message to Channel:
        - When a new user joins the server, the bot will also send a welcome message to a specific, pre-configured public channel (ID from `.env`).
        - This welcome message will be generated by the LLM. The prompt for this message should be configurable.

6. LLM Interaction Specifics
----------------------------
    6.1. General Approach:
        - All interactions with the LLM are via an API (e.g., OpenWebUI compatible). The API URL, token, and model name are configurable in `.env`.

    6.2. Input to LLM (User Verification):
        - The LLM receives:
            - The user's most recent message.
            - A history of the current DM conversation for context.
            - The bot's current list of categorized, available server roles (from Section 3.3).
            - A base prompt template (from a prompt file) guiding the verification dialogue.

    6.3. Expected Output from LLM (User Verification - JSON structure):
        - The LLM is expected to return a JSON object with a structure similar to:
          ```json
          {
            "classification": { // Dictionary mapping categories to lists of role IDs
              "Programming Language": [1234567890, ...],
              "Experience Level": [9876543210, ...],
              "Operating System": []
            },
            "message_to_user": "Text string of the message to send to the user.",
            "is_complete": true/false, // Boolean indicating if LLM believes all required categories are sufficiently filled.
            "unassignable_skills": [ // Optional: list of skills mentioned but not mappable
              {"category": "Programming Language", "skill": "Pascal"}
            ]
          }
          ```
        - The bot will parse this structure to take action.

    6.4. Prompts:
        - Prompts for LLM interaction (e.g., initial role categorization, user verification dialogue, channel welcome message) are stored in external text files (paths configured in `.env`). This allows for easy modification without code changes.

7. Key Configuration-Driven Behaviors (via `.env` file)
---------------------------------------------------------
Many aspects of the bot's behavior are controlled by variables in the `.env` file:
    - Number of retries for the verification process.
    - Role IDs for "verified", "unverified", "verificationinprogress", and admin access.
    - Channel IDs for admin notifications (unmappable skills) and public welcome messages.
    - LLM API details (URL, token, model).
    - Paths to prompt files.
    - Flag to control rebuilding of role categories on startup.
    - Logging level.

8. Notifications
-----------------
    - Admin Notifications: Sent to a designated channel (ID from `.env`) when a user mentions a skill that appears valid for a category but for which no existing server role is found in the bot's categorized list (see Section 3.4).

===================================================